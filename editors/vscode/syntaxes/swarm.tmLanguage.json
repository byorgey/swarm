{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "swarm",
  "patterns": [
    { "include": "#keywords" },
    { "include": "#comments" },
    { "include": "#strings" },
    { "include": "#variables" },
    { "include": "#constants" },
    { "include": "#expressions" }
  ],
  "repository": {
    "expressions": {
      "patterns": [
        {
          "begin": "\\(",
          "end": "\\)",
          "beginCaptures": { "0": { "name": "punctuation.paren.open" } },
          "endCaptures": { "0": { "name": "punctuation.paren.close" } },
          "name": "expression.group",
          "patterns": [
            { "include": "#keywords" },
            { "include": "#comments" },
            { "include": "#strings" },
            { "include": "#variables" },
            { "include": "#constants" },
            { "include": "#expressions" }
          ]
        },
        {
          "begin": "{",
          "end": "}",
          "beginCaptures": { "0": { "name": "punctuation.bracket.open" } },
          "endCaptures": { "0": { "name": "punctuation.bracket.close" } },
          "name": "expression.group",
          "patterns": [
            { "include": "#keywords" },
            { "include": "#comments" },
            { "include": "#strings" },
            { "include": "#variables" },
            { "include": "#constants" },
            { "include": "#expressions" }
          ]
        }
      ]
    },
    "comments": {
      "patterns": [
        { "name": "comment.line.double-slash", "begin": "//", "end": "\n" },
        { "name": "comment.block", "begin": "/[*]", "end": "[*](/)" }
      ]
    },
    "strings": { "patterns": [{ "name": "string.quoted.double", "begin": "\"", "end": "\"" }] },
    "variables": {
      "patterns": [
        {
          "name": "variable.language.dir",
          "match": "\\b(east|north|west|south|down|forward|left|back|right|)\\b"
        },
        { "name": "variable.parameter", "match": "\\b([a-z]\\w*)\\b" }
      ]
    },
    "constants": { "patterns": [{ "name": "constant.numeric", "match": "([0-9]+|0b[01]+|0o[0-8]+|0x\\x+)" }] },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.dictionary.tydef",
          "match": "(tydef)\\s+([^=]+)\\s*=((\\s*([A-Z][a-z]*|\\(|\\)|\\{|\\}|(\\*|\\+|->)|[a-z]\\w*|forall ([a-z]\\w*\\s*)+.)\\s*)+)\\s*(end)\\b",
          "captures": {
            "1": { "name": "keyword.control.dictionary.tydef.start" },
            "2": { "name": "entity.name.type" },
            "3": { "name": "entity.name.type" },
            "8": { "name": "keyword.control.dictionary.tydef.end" }
          }
        },
        {
          "name": "keyword.control.dictionary.def",
          "begin": "def\\s+(\\w+)\\s*(:((\\s*([A-Z][a-zA-Z]*|\\(|\\)|\\{|\\}|(\\*|\\+|->)|[a-z]\\w*|forall ([a-z]\\w*\\s*)+.)\\s*)+))?=",
          "end": "\\s*(end)\\b",
          "beginCaptures": { "1": { "name": "entity.name.function" }, "3": { "name": "entity.name.type" } },
          "endCaptures": { "1": { "name": "keyword.control.dictionary.def.end" } },
          "patterns": [
            { "include": "#keywords" },
            { "include": "#comments" },
            { "include": "#strings" },
            { "include": "#variables" },
            { "include": "#constants" },
            { "include": "#expressions" }
          ]
        },
        {
          "name": "keyword.control.dictionary.let",
          "begin": "\\blet\\s+(\\w+)\\s*(:((\\s*([A-Z][a-zA-Z]*|\\(|\\)|\\{|\\}|(\\*|\\+|->)|[a-z]\\w*|forall ([a-z]\\w*\\s*)+.)\\s*)+))?=",
          "end": "\\b(in)\\b",
          "beginCaptures": { "1": { "name": "entity.name.function" }, "3": { "name": "entity.name.type" } },
          "endCaptures": { "1": { "name": "keyword.control.dictionary.let.in" } },
          "patterns": [
            { "include": "#keywords" },
            { "include": "#comments" },
            { "include": "#strings" },
            { "include": "#variables" },
            { "include": "#constants" },
            { "include": "#expressions" }
          ]
        },
        { "name": "keyword.control.require", "match": "require" },
        {
          "name": "keyword.operator.lambda",
          "match": "\\\\(\\w+)\\.",
          "captures": { "1": { "name": "variable.other" } }
        },
        {
          "name": "keyword.other",
          "match": "\\b(self|parent|base|if|inl|inr|case|fst|snd|force|undefined|fail|not|format|chars|split|charat|tochar|key|noop|wait|selfdestruct|move|backup|volume|path|push|stride|turn|grab|harvest|sow|ignite|place|ping|give|equip|unequip|make|has|equipped|count|drill|use|build|salvage|reprogram|say|listen|log|view|appear|create|halt|time|scout|whereami|waypoint|structure|floorplan|hastag|tagmembers|detect|resonate|density|sniff|chirp|watch|surveil|heading|blocked|scan|upload|ishere|isempty|meet|meetall|whoami|setname|random|run|return|try|swap|atomic|instant|installkeyhandler|teleport|as|robotnamed|robotnumbered|knows)\\b"
        },
        {
          "name": "keyword.operator",
          "match": "-|==|!=|<|>|<=|>=|\\|\\||&&|\\+|-|\\*|/(?![/|*])|\\^|\\+\\+|\\$"
        }
      ]
    }
  },
  "scopeName": "source.swarm"
}