- name: tree
  display:
    attr: plant
    char: 'T'
  description:
  - |
    A tall, living entity made of a tough cellular material called "wood".
    They regrow after being harvested and are an important raw ingredient used
    in making many different devices.
  properties: [portable, growable]
  growth: [500, 600]

- name: branch
  display:
    attr: wood
    char: 'y'
  description:
  - A branch cut from a tree.  It's as if the tree had to make a decision
    and was exploring two options.
  properties: [portable]

- name: log
  display:
    attr: wood
    char: 'l'
  description:
  - A wooden log, obtained by harvesting a tree and cutting off its branches.
  properties: [portable]

- name: board
  display:
    attr: wood
    char: 'w'
  description:
  - A wooden board.
  properties: [portable]

- name: workbench
  display:
    attr: wood
    char: 'π'
  description:
  - A plain wooden workbench, providing space for you to make other
    things using the 'make' command.
  - 'Example:'
  - 'make "log"'
  properties: [portable]
  capabilities: [make]

- name: rock
  display:
    attr: rock
    char: 'o'
  description:
  - A small rock.
  properties: [portable]

- name: boulder
  display:
    attr: rock
    char: '@'
  description:
  - A very large, impassable rock. A drill can be used to get rid of it and turn it into smaller rocks.
  properties: [unwalkable]

- name: mountain
  display:
    attr: snow
    char: 'A'
  description:
  - A mountain. Can be tunneled through with a drill, but it takes time.
  properties: [unwalkable]

- name: mountain tunnel
  display:
    attr: snow
    char: 'Å'
    priority: 11
  description:
  - A tunnel in a mountain through which robots can freely move.
  properties: []

- name: copper ore
  display:
    attr: copper
    char: 'C'
  description:
  - Raw copper ore.  It is extremely useful for making wires, pipes, and other metal things.
    Patches of copper ore can be found on the surface, but are quickly exhausted.
  - Scanners seem to indicate larger quantities of copper could be found beneath some of the
    mountains, but those would require a drill to access and mine.
  properties: [portable]

- name: copper vein
  display:
    attr: copper'
    char: 'A'
  description:
  - A place in the mountains where raw copper ore can be mined.
    As it is hidden inside a mountain, a tunnel needs to be
    first drilled through, so that the vein becomes accessible.
  properties: [unwalkable]

- name: copper mine
  display:
    attr: copper'
    char: 'Å'
  description:
  - A copper vein that can be actively mined to produce copper ore.
  properties: []

- name: copper wire
  display:
    attr: copper
    char: '|'
  description:
  - Copper wire is very good at conducting electricity and useful for
    making various types of circuits and machines.
  properties: [portable]

- name: strange loop
  display:
    attr: copper
    char: '8'
  description:
  - Two copper wires twisted together in a strange shape that loops
    back on itself. It must be useful for something...
  properties: [portable]
  capabilities: [recursion]

- name: copper pipe
  display:
    attr: copper
    char: 'I'
  description:
  - A pipe made out of a thin sheet of copper.  Great for transmitting
    water or steam.
  properties: [portable]

- name: furnace
  display:
    attr: fire
    char: '#'
  description:
  - A furnace can be used to turn metal ore into various useful products.
  properties: [portable]

- name: motor
  display:
    attr: entity
    char: 'M'
  description:
  - A motor is useful for making devices that can turn when electric
    current is applied.
  properties: [portable]

- name: flower
  display:
    attr: flower
    char: '*'
  description:
  - A flower.
  properties: [portable, growable]
  growth: [30, 50]

- name: lambda
  display:
    attr: flower
    char: 'λ'
  description:
  - A wild lambda.  They are somewhat rare, but regrow when picked.  Lambdas
    are delicious when cooked into curry.
  - Lambdas can also be used to create functions. For example,
  - '  def thrice : cmd () -> cmd () = \c. c;c;c end'
  - defines the function 'thrice' which repeats a command three times.
  properties: [portable, growable]
  growth: [100, 200]
  capabilities: [lambda]

- name: curry
  display:
    attr: flower
    char: 'C'
  description:
  - Delicious curry cooked from wild lambdas.
  properties: [portable]

- name: water
  display:
    attr: water
    char: ' '
  description:
  - Water.
  properties: [portable, growable, liquid]
  growth: [0,0]

- name: wavy water
  display:
    attr: water
    char: '~'
  description:
  - A wavy section of water.
  properties: [portable, growable, liquid]
  growth: [0,0]
  yields: water

- name: boat
  display:
    attr: wood
    char: 'B'
  description:
  - A robot with a boat installed can float on top of water without drowning!
  - "Note: most devices are automatically installed on robots
    that will require them; but since floating is not associated with any particular
    command, a boat must be manually installed on any robot that will need it."
  properties: [portable]
  capabilities: [float]

- name: bit (0)
  display:
    attr: entity
    char: '0'
  description:
  - A bit.
  properties: [portable, growable]
  growth: [1000, 1500]

- name: bit (1)
  display:
    attr: entity
    char: '1'
  description:
  - A bit.
  properties: [portable, growable]
  growth: [1000, 1500]

- name: drill bit
  display:
    attr: entity
    char: '!'
  description:
  - A drill bit is an important component of a drill.
  properties: [portable]

- name: box
  display:
    attr: wood
    char: '□'
  description:
  - A wooden box.  It can hold things.
  properties: [portable]

- name: gear
  display:
    attr: wood
    char: '*'
  description:
  - A wooden gear.
  properties: [portable]

- name: counter
  display:
    attr: device
    char: 'C'
  description:
  - "Increment and reset, what more could you want?"
  - |
    A counter enables the command 'count : string -> cmd int',
    which counts how many occurrences of an entity are currently
    in the inventory.  This is an upgraded version of the 'has'
    command, which returns a bool instead of an int and does
    not require any special device.
  properties: [portable]
  capabilities: [count]

- name: Linux
  display:
    attr: entity
    char: 'L'
  description:
  - A copy of the Linux operating system.
  properties: [portable]

############################################################
### Devices ################################################
############################################################

- name: treads
  plural: treads
  display:
    attr: device
    char: '%'
  description:
  - Installing treads on a robot allows it to move (via the 'move' command) and turn
    (via the 'turn' command).
  - 'Example:'
  - '  move; turn left; move; turn north'
  capabilities: [move, turn]
  properties: [portable]

- name: grabber
  display:
    attr: device
    char: '<'
  description:
  - A grabber arm is an all-purpose device allowing a robot to
    manipulate other items and robots via the 'grab', 'place', 'give',
    and 'install' commands.
  - The 'grab' command takes no arguments; it simply grabs whatever is
    available, and also returns the name of the grabbed thing as a string.
    It raises an exception if run in a cell that does not contain an item.
  - The 'place' command takes one argument, the name of the item to
    place.  The item is removed from the robot's inventory and placed
    in the robot's current cell (which must be empty).  Raises an
    exception if the operation fails.
  - "The 'give' command takes two arguments: the name of the robot to
    give an item to (which can be at most 1 cell away), and the name
    of the item to give. Raises an exception if the operation fails."
  - "The 'install' command takes two arguments: the name of the robot
    on which to install a device (which can be at most 1 cell away),
    and the name of the device to install."

  capabilities: [grab, give, place, install]
  properties: [portable]

- name: plasma cutter
  display:
    attr: device
    char: '+'
  description:
  - "A plasma cutter uses a jet of hot plasma to cut through metal like
    butter.  Used via the 'salvage' command to cut apart old robots."
  - "'salvage' takes no arguments. It looks for an inactive
    robot (one which is not currently running a program) in the
    current cell. If an inactive robot is found, its log (if any) is
    downloaded and it is dismantled, transferring its devices and inventory to the
    robot running 'salvage'.  If no inactive robots are found in the
    current cell, 'salvage' does nothing."
  capabilities: [salvage]
  properties: [portable]

- name: solar panel
  display:
    attr: device
    char: '#'
  description:
  - An extremely efficient solar panel, capable of generating sufficient power
    from ambient starlight alone. A robot powered by one of these can operate any time,
    including on cloudy days and at night.
  properties: [portable]

- name: drill
  display:
    attr: device
    char: '!'
  description:
  - A drill allows robots to drill through rocks and mountains.
  capabilities: [drill]
  properties: [portable]

- name: 3D printer
  display:
    attr: device
    char: '3'
  description:
  - A 3D printer gives you the capability of printing more robots! You
    can access the 3D printer via the 'build' command.
  - 'Example:'
  - '  build "fred" {move; grab; turn back; move; give "base"
    "tree"}'
  - |
    builds a robot named "fred" to get the tree on the cell to the
    east (if there is one) and bring it back to you. Note that if
    there is already a robot named "fred", the new robot will be given
    a similar but unique name.  The 'build' command always returns the
    name of the newly constructed robot. For example,
  - '  name <- build "fred" {move}; view name'
  - |
    builds a robot and then views it (no matter what it ends up being named).

  properties: [portable]
  capabilities: [build]

- name: dictionary
  display:
    attr: device
    char: 'D'

  description:
  - |
    A dictionary allows a robot to remember definitions and reuse them
    later.  You can access this ability with either a 'def' command,
    which creates a name for an expression or command that is
    available from then on, or with a 'let' expression, which names an
    expression or command locally within another expression.
  - '  def m2 : cmd () = move; move end'
  - '  let x : int = 3 in x^2 + 2*x + 1'
  - The type annotations in 'def' and 'let' are optional.

  properties: [portable]
  capabilities: [env]

- name: branch predictor
  display:
    attr: device
    char: 'y'
  description:
  - |
    A branch predictor is a device which allows a robot to interpret
    conditional expressions.  The syntax for a conditional expression
    is 'if' followed by three arguments: a boolean test and then
    two expressions of the same type.
  - 'Example:'
  - 'if (x > 3) move {turn west; move}'
  properties: [portable]
  capabilities: [cond]

- name: detonator
  display:
    attr: fire
    char: '*'
  description:
  - An explosive device which can be used to self-destruct, via the
    'selfdestruct' command.  Immediately vaporizes the robot and any
    inventory it is carrying.  Can be useful, say, if you are sending
    out some exploratory robots and don't want them cluttering up the
    world once they are done.
  properties: [portable]
  capabilities: [selfdestruct]

- name: life support system
  display:
    attr: device
    char: 'O'
  description:
  - A state-of-the-art life support system which maintains the
    particular temperature and mixture of gases you need to survive.
    It uses a sophisticated recirculating system and can run pretty
    much indefinitely.  Unfortunately, the atmosphere outside is
    severly toxic (why do the inhabitants of this planet need so much
    nitrogen!?), so you'll have to stay inside for now.
  properties: [portable]

- name: scanner
  display:
    attr: device
    char: '$'
  description:
  - "With a scanner device, robots can use the 'scan' command to learn
    about their surroundings.  Simply give 'scan' a direction in which to scan,
    and information about the scanned item (if any) will be added to the robot's
    inventory."
  - "A scanner also enables the 'blocked' command, which returns a
     boolean value indicating whether the robot's path is blocked
     (i.e. whether executing a 'move' command would fail)."
  - "Finally, robots can use the 'upload' command to copy their accumulated
    knowledge to another nearby robot; for example, 'upload \"base\"'."
  properties: [portable]
  capabilities: [scan, sensefront, sensehere]

- name: flash memory
  display:
    attr: device
    char: '§'
  description:
  - "Using a flash memory device, a robot can reprogram other robots using the
     'reprogram' command."
  - "Only robots that have completed executing their previous command
     can be reprogrammed."
  - "The robot must possess enough capabilities to run the new command
     otherwise it will fail."
  properties: [portable]
  capabilities: [reprogram]

- name: mirror
  display:
    attr: device
    char: 'U'
  description:
  - "With a mirror, robots can reflect on themselves and see their own name."
  - "A mirror enables the 'whoami' command, which returns the robot's
     name as a string."
  properities: [portable]
  capabilities: [whoami]

- name: logger
  display:
    attr: device
    char: 'l'
  description:
  - "Allows a robot to generate and store messages for later viewing,
    using the 'log' command, which takes a string.  Log messages are
    also automatically generated by uncaught exceptions. If you want
    to be able to see why a robot crashed, install a logger (see the
    'grabber' device for help on manually installing devices; or a
    'logger' device will be automatically installed on any robot that
    uses the 'log' command)."
  properties: [portable]
  capabilities: [log]
