version: 1
name: Pastoral Island
author: Karl Ostmo
description: |
  Start a wool industry from the local fauna.
creative: false
objectives:
  - goal:
      - |
        You've homesteaded on a small island in the ocean.
        It's time to gather resources to trade.
      - |
        You encounter some feral sheep (@). They look like a promising
        source of wool. They slowly wander the island and eat grass.
      - |
        First, paddock the sheep so they don't drown.
        Construct a fence using the nearby gate as a starting point.
        Make sure there are no gaps!
      - |
        Note that you can use the "drill" command (by way of the "post puller" tool)
        to demolish a fence that has been "placed".
    condition: |
      def elif = \p.\t.\e. {if p t e} end;

      def go : cmd (unit + dir) -> cmd unit = \gps.
        md <- gps;
        case md (\_.
          noop
        ) (\d.
          turn d;
          move;
          go gps
        )
      end;

      def scanIf: dir -> (unit + dir) -> text -> cmd (unit + dir) =
          \d. \current. \e.
          sc <- scan d;
          if (sc == inr e) {
              if (current == inl ()) {
                  // say ("I am going " ++ format d);
                  return $ inr d
              } {
                  // say "Multiple paths!";
                  fail "Multiple paths!"
              }
          } {
              return $ current
          }
      end;

      def follow: text -> cmd (unit + dir) = \e.
          let noDir: unit + dir = inl () in
          f <- scanIf forward noDir e;
          fl <- scanIf left f e;
          flr <- scanIf right fl e;
          return flr;
      end;

      // follow a path from that ends right next to starting location
      def broken_circle_north: text -> cmd bool = \e.
          turn north;
          b <- try {
              go (follow e); return true
          } {
              // say "failed to follow"; wait 8; selfdestruct;
              return false
          };
          if b {
              // end next to start
              l <- whereami;
              //say ("I am at" ++ format l);
              //selfdestruct;
              return $ l == (0,-1)
          } {
              return false
          }
      end;


      def untilBaaad: dir -> cmd (unit + dir) = \d.
        //bl <- blocked;
        //if bl {
        //  return $ inl ()
        //} {
          sf <- scan forward;
          if (sf == inr "water" || sf == inr "gate") {
              return $ inl ()
          } {
              return $ inr d
          }
        //} 
      end;

      def checkWaterR: int -> cmd int = \n.
          try {
              r <- robotNumbered n;
              wN <- as r {go (untilBaaad north); sf <- scan forward; return $ sf == inr "water"};
              wS <- as r {go (untilBaaad south); sf <- scan forward; return $ sf == inr "water"};
              if (wS || wN) {return 0} {return 1}
          } {
              return 0; 
          }
      end;

      // WATCH PROOF OF CONCEPT
      //
      // this shows that waiting for entities in location saves most time
      // -> checks only after the fence is connected to both sides
      //
      teleport self (1,2);
      sd1 <- scan west;
      teleport self (1,-2);
      sd2 <- scan west;
      teleport self (0,0);

      if (sd1 == inr "fence" && sd2 == inr "fence") {
      /**************************************/
          // SHEEP CHECK
          //
          // one sheep has to be surrounded by the
          // fence from top and bottom
          //
          sheepWater1 <- checkWaterR 1;
          if (sheepWater1 == 1) {
              broken_circle_north "fence"
          } {
              sheepWater2 <- checkWaterR 2;
              if (sheepWater2 == 1) {
                  broken_circle_north "fence"
              } {
                  sheepWater3 <- checkWaterR 3;
                  if (sheepWater3 == 1) {
                      broken_circle_north "fence"
                  } {
                      return false;
                  }
              }
          }
      /**************************************/
      } {
          return false;
      }


robots:
  - name: base
    dir: [0, 1]
    devices:
      - treads
      - scanner
      - dictionary
      - branch predictor
      - strange loop
      - clock
      - ADT calculator
      - comparator
      - workbench
      - grabber
      - lambda
      - logger
      - hearing aid
      - post puller
    inventory:
      - [0, fence]
      - [0, gate]
      - [10, hinge]
  - name: sheep
    description:
      - meandering livestock
    display:
      invisible: false
      char: '@'
    system: true
    dir: [0, 1]
    program: |
      run "scenarios/Challenges/Ranching/_gated-paddock/meandering-sheep.sw";
entities:
  - name: fence
    display:
      char: '#'
    description:
    - Keeps sheep in. And some other things out.
    properties: [known, portable,  unwalkable]
  - name: post puller
    display:
      char: 'P'
      attr: rock
    capabilities: [drill]
    description:
    - Good for dismantling fences.
    properties: [known]
  - name: scrap wood
    display:
      char: '\'
    description:
    - Scrap wood. Good for nothing, really.
    properties: [known]
  - name: gate
    display:
      char: '/'
      attr: rock
    description:
    - A gate permits the player to pass through, but sheep cannot.
    properties: [known]
  - name: hinge
    display:
      char: 'U'
      attr: rock
    description:
    - Facilitates swinging action.
    properties: [known]
  - name: cabin
    display:
      char: Î 
      attr: rock
    description:
    - Home sweet home.
    properties: [known,  unwalkable]
  - name: fresh breadcrumb
    display:
      char: '.'
    description:
    - A marker that can be put down and found again.
    properties: [portable]
  - name: treaded breadcrumb
    display:
      char: 'x'
    description:
    - A marker that can be put down and found again (for a second time).
    properties: [portable]
recipes:
  - in:
    - [2, board]
    out:
    - [1, fence]
  - in:
    - [0, fresh breadcrumb]
    out:
    - [1, fresh breadcrumb]
  - in:
    - [1, fresh breadcrumb]
    out:
    - [1, treaded breadcrumb]
  - in:
    - [1, fence]
    out:
    - [1, scrap wood]
    required:
    - [1, post puller]
  - in:
    - [1, hinge]
    - [1, fence]
    out:
    - [1, gate]
known: [mountain, tree, water]
seed: 0
solution: |
  run "scenarios/Challenges/Ranching/_gated-paddock/fence-construction.sw"
world:
  default: [dirt, water]
  palette:
    'B': [grass, null, base]
    '.': [grass]
    'G': [grass, gate]
    'f': [grass, fence]
    't': [dirt, tree]
    'x': [stone, mountain]
    'c': [stone, cabin]
    's': [grass, null, sheep]
    '~': [dirt, water]
  upperleft: [-35, 11]
  map: |
    ~~.........~~~~~~~~~~~~~.......................~~~~~
    ~..............~~~~...............................~~
    ...................................................~
    ....................................................
    .........................................tttttttt...
    .........................................tttttttt...
    ..............................x..........tttttttt...
    .........................................tttttttt...
    .........s...............................tttttttt...
    .........................................tttttttt...
    ...................................f................
    ..xx...............................G.....B......c...
    ...x...............................f................
    ..............................s.....................
    ....................................................
    ....................................................
    ~........x.....s....................................
    ~~..................................................
    ~~~..........................x..............~~~~....
    ~~~....................................~~~~~~~~~...~
    ~~......................................~~~~~~~~~~~~
    ~~..............................~~~~~~~~~~~~~~~~~~~~
    ~~~~...................~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
