version: 1
name: Shortest path
author: Brent Yorgey
description: There is a maze, but it can't be seen, only sensed... can you
  program a robot to navigate it successfully, via the shortest possible path?
objectives:
- goal:
  - There is a maze, but it can't be seen, only sensed... can you
    program a robot to navigate it successfully, via the shortest
    possible path? You win by marking any shortest path from the
    base to the goal with `path` markers.
  condition: |
    return false
    // def tL = turn left end;
    // def tR = turn right end;
    // def tB = turn back end;
    // def ifC = \p.\t.\e. b <- p; if b t e end;
    // def countpath = \d.
    //   turn d;
    //   n <- ifC blocked {return 0} {move; ifC (ishere "path") {return 1} {return 0}};
    //   turn d; turn d; turn d;
    //   return n
    // end;
    // def follow : int -> cmd (unit + int) = \n.
    //   ifC (ishere "goal") {return (inr n)}
    //   {
    //     a <- countpath left;
    //     b <- countpath forward;
    //     c <- countpath right;
    //     if (a + b + c != 1) {return (inl ())}
    //     {
    //       return (inl ())
    //     }
    //   }
    // end
solution: |
  run "scenarios/Challenges/Mazes/_shortest_path/shortest_path_sol.sw"
robots:
  - name: base
    dir: [0,1]
    display:
      char: 'Ω'
      attr: robot
    devices:
      - dictionary
      - 3D printer
      - logger
      - grabber
    inventory:
      - [50, solar panel]
      - [50, treads]
      - [50, compass]
      - [50, scanner]
      - [50, lambda]
      - [50, branch predictor]
      - [50, strange loop]
      - [50, calculator]
      - [50, comparator]
      - [50, logger]
      - [50, string]
      - [50, grabber]
      - [1000, rock]
      - [1000, path]
      - [0, boulder]
      - [0, goal]
entities:
  - name: wall
    display:
      invisible: true
    description:
    - An invisible wall.
    properties: [unwalkable, known]
  - name: goal
    display:
      char: '!'
      attr: device
    description:
    - The place you're trying to reach!  You win by executing `grab` on this item.
    properties: [known, portable]
  - name: path
    display:
      char: '.'
      attr: device
    description:
    - A marker that should be used to mark each cell in a shortest path from the start
      to the goal.  Just `place "path"` on each cell that is part of a shortest path.
world:
  default: [grass]
  palette:
    'Ω': [grass, null, base]
    '.': [grass, null]
    'x': [grass, wall]
    '@': [grass, boulder]
    '!': [grass, goal]
  upperleft: [-1,1]
  map: |
    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    @Ω........x...x..............@
    @xx.xxxxx.x.x.xxx....xxxxxxx.@
    @.x.x...x.x.x...xxxx.......x.@
    @.....x.x.x.x.x....xxxxxxxxx.@
    @xx.xxxxx.x.x.xxxx...........@
    @.......x...x....xxxxxxx.xxxx@
    @.xxxxx.xxx.xxxx.x...........@
    @.x.x.x..x.......x.xxx.xxxxx.@
    @.x.x.xx.x.x.xxx.x.x.....x...@
    @.x.x.xx.x.x...x...x.x.x.x.xx@
    @......x...x.x...x.x.x.x.x...@
    @xxxxxxx.xxx.xxxxx.x.x.x.xxx.@
    @....................x.x.x.x.@
    @xxxxxxxxxx.xxxxxxxxxx.x.x.x.@
    @..x...x.......x.....x.x.....@
    @x.......x...x...x.x.x.x.x.x.@
    @xxxxxxxxxx.xxxxxx.x.x.x.x.x.@
    @..................x...x...x!@
    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
