version: 1
name: Moving, part 1
description: |
  Learn how to move and chain commands.
objectives:
  - goal:
      - Robots can use the `move` command to move forward one unit
        in the direction they are currently facing.
      - To complete this challenge, move your robot two spaces to the right,
        to the coordinates (2,0).
      - You can open this popup window at any time to remind yourself of the goal
        using Ctrl-G.
    condition: |
      try {
        loc <- as base {whereami};
        return (loc == (2,0))
      } { return false }
solution: |
  move; move
world:
  default: [blank]
  palette:
    '.': [grass]
    ' ': [blank]
    # FIRST ROOM
    '┌': [blank, upper left corner]
    '┐': [blank, upper right corner, upright0]
    '└': [blank, lower left corner]
    '┘': [blank, lower right corner, lowright0]
    '─': [blank, horizontal wall]
    '│': [blank, vertical wall]
    # SECOND ROOM
    'G': [blank, vertical wall, gate]
    '-': [blank, "1", horizon]
    '|': [blank, "1", vertice]
    'u': [blank, "1", upright]
    'l': [blank, "1", lowright]
  upperleft: [-1, 1]
  map: |
    ┌───┐-----u
    │   G     |
    └───┘-----l


# ███████ ██     ██  █████  ██████  ███    ███ 
# ██      ██     ██ ██   ██ ██   ██ ████  ████ 
# ███████ ██  █  ██ ███████ ██████  ██ ████ ██ 
#      ██ ██ ███ ██ ██   ██ ██   ██ ██  ██  ██ 
# ███████  ███ ███  ██   ██ ██   ██ ██      ██ 

robots:
  - name: base
    dir: [1,0]
    loc: [0,0]
    devices:
      - treads
      - logger
  - name: check1
    dir: [0,0]
    loc: [2,0]
    system: true
    display:
      invisible: true
    program: |
      def until = \c. b <- c; if b {} {until c} end;
      until (
        try {
          loc <- as base {whereami};
          return (loc == (2,0))
        } { return false }
      );
      create "Win"
  - name: horizon
    dir: [0,0]
    system: true
    display:
      invisible: true
    inventory: [[1,horizontal wall]]
    program: |
      def until = \c. b <- c; if b {} {until c} end;
      n <- (s <- scan down; case s (\_. fail "Fatal error: missing room number!") return);
      c1 <- robotNamed ("check" ++ n);
      until (as c1 {has "Win"});
      swap "horizontal wall"
  - name: vertice
    dir: [0,0]
    system: true
    display:
      invisible: true
    inventory: [[1,vertical wall]]
    program: |
      def until = \c. b <- c; if b {} {until c} end;
      n <- (s <- scan down; case s (\_. fail "Fatal error: missing room number!") return);
      c1 <- robotNamed ("check" ++ n);
      until (as c1 {has "Win"});
      swap "vertical wall"
  - name: upright
    dir: [0,0]
    system: true
    display:
      invisible: true
    inventory: [[1,upper right corner]]
    program: |
      def until = \c. b <- c; if b {} {until c} end;
      n <- (s <- scan down; case s (\_. fail "Fatal error: missing room number!") return);
      c1 <- robotNamed ("check" ++ n);
      until (as c1 {has "Win"});
      swap "upper right corner"
  - name: lowright
    dir: [0,0]
    system: true
    display:
      invisible: true
    inventory: [[1,lower right corner]]
    program: |
      def until = \c. b <- c; if b {} {until c} end;
      n <- (s <- scan down; case s (\_. fail "Fatal error: missing room number!") return);
      c1 <- robotNamed ("check" ++ n);
      until (as c1 {has "Win"});
      swap "lower right corner"
  - name: upright0
    dir: [0,0]
    system: true
    display:
      invisible: true
    inventory: [[1,down and horizontal wall]]
    program: |
      def until = \c. b <- c; if b {} {until c} end;
      c1 <- robotNamed "check1";
      until (as c1 {has "Win"});
      swap "down and horizontal wall"
  - name: lowright0
    dir: [0,0]
    system: true
    display:
      invisible: true
    inventory: [[1,up and horizontal wall]]
    program: |
      def until = \c. b <- c; if b {} {until c} end;
      c1 <- robotNamed "check1";
      until (as c1 {has "Win"});
      swap "up and horizontal wall"
  - name: gate
    dir: [0,0]
    system: true
    display:
      invisible: true
    program: |
      def until = \c. b <- c; if b {} {until c} end;
      c1 <- robotNamed "check1";
      until (as c1 {has "Win"});
      grab
entities:
  - name: Win
    display:
      char: W
      attr: gold
    description:
      - This entity signals that the objective has been met.
  - name: "1"
    display:
      char: W
      invisible: true
    description:
      - This entity is used to mean that the robot should check the 1st objective.
  - name: "2"
    display:
      char: W
      invisible: true
    description:
      - This entity is used to mean that the robot should check the 2nd objective.
  - name: "3"
    display:
      char: W
      invisible: true
    description:
      - This entity is used to mean that the robot should check the 3rd objective.
