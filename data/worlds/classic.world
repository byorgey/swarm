let pn0 = perlin seed 6 0.05 0.6,
    pn1 = perlin (seed + 1) 6 0.05 0.6,
    pn2 = perlin (seed + 2) 6 0.05 0.6,
    cl  = perlin seed 4 0.08 0.5,
    big = pn0 > 0.0,
    hard = pn1 > 0.0,
    artificial = pn2 > 0.0,
    small = not big,
    soft = not hard,
    natural = not artificial
in
overlay
[ mask (big && hard && artificial)
    (if (cl > 0.85) then {stone, copper ore} else {stone})
, mask (big && hard && natural)
  ( overlay
    [ {grass}
    , mask (cl > 0.0) (if (hash % 30 == 1) then {dirt, LaTeX} else {dirt, tree})
    , mask (hash % 30 == 0) {stone, boulder}
    , mask (cl > 0.5) {stone, mountain}
    ]
  )
, mask (small && hard && natural)
  ( overlay
    [ {stone}
    , mask (hash % 10 == 0) {stone, rock}
    , mask (hash % 100 == 0) {stone, lodestone}
    ]
  )
, mask (big && soft && natural)
  ( overlay
    [ {dirt, water}
    , mask ((x + y) % 2 == 0) {dirt, wavy water}
    , mask (abs pn1 < 0.1) {dirt, sand}
    ]
  )
, mask (small && soft && natural)
  ( overlay
    [ {grass}
    , mask (hash % 20 == 10) {grass, cotton}
    , mask (hash % 20 == 0)  {grass, flower}
    ]
  )
, mask (small && soft && artificial)
  ( overlay
    [ {grass}
    , mask (hash % 10 == 0)
        (if (x + y) % 2 == 0 then {grass, bit (0)} else {grass, bit (1)})
    ]
  )
, mask (big && soft && artificial)
  ( overlay
    [ {dirt}
    , mask (cl > 0.5) {grass}
    , mask (hash % 5000 == 0) {dirt, Linux}
    ]
  )
, mask (small && hard && artificial)
  ( overlay
    [ {stone}
    , mask (hash % 50 == 0)
        let i = (x - y) % 3 in
        if (i == 0) then {stone, pixel (R)}
        else if (i == 1) then {stone, pixel (G)}
        else {stone, pixel (B)}
    , mask (hash % 120 == 1) {stone, lambda}
    ]
  )
]
